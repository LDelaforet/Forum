Voici la liste des fonctions organis√©es par fichiers dans une structure MVC propre :
1. Fichiers Mod√®les (models/)
models/user.go

    GetByID(id int) (*User, error)

    GetByEmail(email string) (*User, error)

    Create(user *User) error

    Update(user *User) error

    Delete(id int) error

    Authenticate(email, password string) (*User, error)

    HashPassword(password string) (string, string, error)

    VerifyPassword(hashedPassword, salt, inputPassword string) bool

models/post.go

    GetByID(id int) (*Post, error)

    GetByUserID(userID int) ([]*Post, error)

    GetAll() ([]*Post, error)

    Create(post *Post) error

    Update(post *Post) error

    Delete(id int) error

models/comment.go

    GetByID(id int) (*Comment, error)

    GetByPostID(postID int) ([]*Comment, error)

    GetReplies(parentID int) ([]*Comment, error)

    Create(comment *Comment) error

    Update(comment *Comment) error

    Delete(id int) error

models/vote.go

    GetByID(id int) (*Vote, error)

    GetByUserAndPost(userID, postID int) (*Vote, error)

    GetByUserAndComment(userID, commentID int) (*Vote, error)

    Create(vote *Vote) error

    Update(vote *Vote) error

    Delete(id int) error

2. Fichiers Contr√¥leurs (controllers/)
controllers/user_controller.go

    Register(c *fiber.Ctx) error

    Login(c *fiber.Ctx) error

    GetProfile(c *fiber.Ctx) error

    UpdateProfile(c *fiber.Ctx) error

    DeleteAccount(c *fiber.Ctx) error

controllers/post_controller.go

    CreatePost(c *fiber.Ctx) error

    GetPost(c *fiber.Ctx) error

    GetAllPosts(c *fiber.Ctx) error

    UpdatePost(c *fiber.Ctx) error

    DeletePost(c *fiber.Ctx) error

controllers/comment_controller.go

    CreateComment(c *fiber.Ctx) error

    GetCommentsByPost(c *fiber.Ctx) error

    UpdateComment(c *fiber.Ctx) error

    DeleteComment(c *fiber.Ctx) error

controllers/vote_controller.go

    VotePost(c *fiber.Ctx) error

    VoteComment(c *fiber.Ctx) error

    RemoveVote(c *fiber.Ctx) error

3. Fichiers Utilitaires (utils/)
utils/db.go

    InitDB() (*sql.DB, error)

    GetMaxID(table string) (int, error)

    CloseDB(db *sql.DB)

utils/auth.go

    GenerateJWT(user *models.User) (string, error)

    ValidateJWT(tokenString string) (*jwt.Token, error)

    HashPassword(password string) (string, error)

    CheckPassword(hashedPassword, inputPassword string) bool

utils/validators.go

    ValidateEmail(email string) bool

    ValidatePassword(password string) bool

    SanitizeInput(input string) string

4. Fichiers Routes (routes/)
routes/api.go

    SetupUserRoutes(router fiber.Router)

    SetupPostRoutes(router fiber.Router)

    SetupCommentRoutes(router fiber.Router)

    SetupVoteRoutes(router fiber.Router)

5. Fichier Principal (main.go)

    main() (initialisation de l'app, connexion DB, routes, middleware, etc.)

Bonus : Structure pour les Tests (tests/)
tests/user_test.go

    TestUserCreation(t *testing.T)

    TestUserLogin(t *testing.T)

    TestUserDeletion(t *testing.T)

tests/post_test.go

    TestPostCreation(t *testing.T)

    TestPostDeletion(t *testing.T)

R√©sum√© des responsabilit√©s :

‚úÖ Mod√®les : Interaction directe avec la base de donn√©es.
‚úÖ Contr√¥leurs : Gestion de la logique m√©tier et des requ√™tes HTTP.
‚úÖ Utilitaires : Fonctions r√©utilisables (DB, auth, validation).
‚úÖ Routes : D√©finition des endpoints API.
‚úÖ Tests : V√©rification du bon fonctionnement.

Cette structure suit les bonnes pratiques MVC et permet une maintenance facile et une bonne s√©paration des responsabilit√©s. üöÄ